from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
import time
import qrcode
import json
import threading
import sourceString as sour
import base64
import customtkinter
import customtkinter as ctk
from tkinter import messagebox
from tkinter import ttk
from tkinter import filedialog
import xml.etree.ElementTree as ET
import os
import tkinter as tk
from tkinter import filedialog
from typing import List, Dict, Any
from PIL import Image, ImageTk
from datetime import datetime, timezone
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from tkcalendar import DateEntry
from rx.subject import Subject
import pandas as pd
from unidecode import unidecode
import os
import json
from datetime import datetime

folderurl = ""

def chuyen_doi_ngay(ngay_goc):
    """Chuy·ªÉn ƒë·ªïi ng√†y t·ª´ 'DD/MM/YYYY HH:MM' th√†nh 'DDMMYYYY'."""
    try:
        return datetime.strptime(ngay_goc, "%d/%m/%Y %H:%M").strftime("%d%m%Y")
    except ValueError:
        return None

def kiem_tra_record(record, mabhyt, mabn, ngayravien):
    """So s√°nh d·ªØ li·ªáu nhanh h∆°n b·∫±ng c√°ch chuy·ªÉn ƒë·ªïi tr∆∞·ªõc."""
    return (
        record.get("mathe") == mabhyt and
        str(record.get("mabn")) == str(mabn) and
        chuyen_doi_ngay(record.get("ngayra")) == ngayravien
    )

def kiemtraketqua(file_path, mabn, mabhyt, ngayravien):
    """T√¨m ki·∫øm nhanh h∆°n b·∫±ng c√°ch d√πng dictionary."""
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
            if not isinstance(data, list):
                raise ValueError("JSON kh√¥ng ch·ª©a danh s√°ch h·ªì s∆° h·ª£p l·ªá.")
            
            ngayravien = chuyen_doi_ngay(ngayravien)  # Chuy·ªÉn ƒë·ªïi tr∆∞·ªõc ƒë·ªÉ tƒÉng t·ªëc

            # T·∫°o dict ƒë·ªÉ t√¨m ki·∫øm nhanh h∆°n
            records_dict = {
                (record.get("mathe"), str(record.get("mabn")), chuyen_doi_ngay(record.get("ngayra"))): record
                for record in data
            }
            
            return records_dict.get((mabhyt, str(mabn), ngayravien))

    except (FileNotFoundError, json.JSONDecodeError, ValueError) as e:
        print(f"L·ªói: {e}")
        return None


def loadfind_json():
    global folderurl
    data = []
    file_path = os.path.join(folderurl, "dataJson.json")
    with open(file_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
        return data
    return data    

def chon_file_excel(app):
    """
    Hi·ªÉn th·ªã h·ªôp tho·∫°i ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn m·ªôt file Excel v√† tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n file.
    """
   
   
    file_path = filedialog.askopenfilename(
        title="Ch·ªçn file Excel",
        filetypes=[("Excel Files", "*.xlsx;*.xls")]
    )

    return file_path

def chuan_hoa_ten_cot(ten_cot):
    """
    Chu·∫©n h√≥a t√™n c·ªôt: lo·∫°i b·ªè d·∫•u, x√≥a kho·∫£ng tr·∫Øng, vi·∫øt th∆∞·ªùng.
    """
    ten_cot = unidecode(ten_cot)  # B·ªè d·∫•u ti·∫øng Vi·ªát
    ten_cot = ten_cot.replace(" ", "").lower()  # X√≥a kho·∫£ng tr·∫Øng, vi·∫øt th∆∞·ªùng
    return ten_cot

def excel_to_json(file_path, output_json):
    """
    Chuy·ªÉn ƒë·ªïi file Excel th√†nh JSON, chu·∫©n h√≥a t√™n c·ªôt.

    :param file_path: ƒê∆∞·ªùng d·∫´n file Excel
    :param output_json: ƒê∆∞·ªùng d·∫´n file JSON ƒë·∫ßu ra
    """
    try:
        # ƒê·ªçc file Excel
        df = pd.read_excel(file_path, engine="openpyxl")

        # Chu·∫©n h√≥a t√™n c·ªôt
        df.columns = [chuan_hoa_ten_cot(col) for col in df.columns]

        # Chuy·ªÉn DataFrame th√†nh danh s√°ch JSON
        data_json = df.to_dict(orient="records")

        # Ghi v√†o file JSON
        with open(output_json, "w", encoding="utf-8") as f:
            json.dump(data_json, f, ensure_ascii=False, indent=4)

        print(f"ƒê√£ t·∫°o file JSON: {output_json}")

    except Exception as e:
        print(f"L·ªói: {e}")

def json_to_excel(json_file, excel_file, columns=None):
    """
    Chuy·ªÉn ƒë·ªïi file JSON th√†nh file Excel, ch·ªâ xu·∫•t c√°c c·ªôt ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.

    :param json_file: ƒê∆∞·ªùng d·∫´n file JSON ƒë·∫ßu v√†o
    :param excel_file: ƒê∆∞·ªùng d·∫´n file Excel ƒë·∫ßu ra
    :param columns: Danh s√°ch c√°c c·ªôt c·∫ßn xu·∫•t (list), n·∫øu None th√¨ xu·∫•t t·∫•t c·∫£
    """
    try:
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON
        df = pd.read_json(json_file)

        # N·∫øu c√≥ danh s√°ch c·ªôt, ch·ªâ gi·ªØ l·∫°i c√°c c·ªôt ƒë√≥
        if columns:
            df = df[columns]

        # Ghi d·ªØ li·ªáu ra file Excel
        df.to_excel(excel_file, index=False, engine="openpyxl")

        print(f"ƒê√£ t·∫°o file Excel: {excel_file}")

    except Exception as e:
        print(f"L·ªói: {e}")

def converttojsonexportkqxml(app):
    """H√†m ch√≠nh ch·∫°y t·ªëi ∆∞u h∆°n."""
    global folderurl
    file_path = os.path.join(folderurl, "dataJson.json")

    if not folderurl or not file_path:
        print("‚ùå L·ªñI: Vui l√≤ng ch·ªçn file JSON ƒë√£ xu·∫•t!")
        return

    print(f"‚úÖ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω v·ªõi folder: {folderurl}")

    try:
        data = loadfind_json()
        if not data:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu trong dataJson.json")
            return
        
        print(f"üîç S·ªë l∆∞·ª£ng b·∫£n ghi: {len(data)}")

        path = chon_file_excel(app)
        if not path:
            print("‚ùå L·ªói: Kh√¥ng ch·ªçn ƒë∆∞·ª£c file Excel")
            return
        
        print(f"üìÇ File Excel ƒë∆∞·ª£c ch·ªçn: {path}")

        excel_to_json(path, "dataXmlResult.json")

        # ƒê·ªçc d·ªØ li·ªáu m·ªôt l·∫ßn duy nh·∫•t
        with open("dataXmlResult.json", "r", encoding="utf-8") as f:
            json_data = json.load(f)

        # T·∫°o dictionary ƒë·ªÉ tra c·ª©u nhanh
        records_dict = {
            (record.get("mathe"), str(record.get("mabn")), chuyen_doi_ngay(record.get("ngayra"))): record
            for record in json_data
        }

        # Duy·ªát v√† c·∫≠p nh·∫≠t k·∫øt qu·∫£ nhanh h∆°n
        for item in data:
            ngay_ra = chuyen_doi_ngay(item["ngay_ra"])  # Chuy·ªÉn ƒë·ªïi tr∆∞·ªõc
            key = (item["insurance_code"], str(item["patient_code"]), ngay_ra)
            record = records_dict.get(key)

            if record:
                print(f"‚úÖ C√≥ k·∫øt qu·∫£ tr·∫£ v·ªÅ cho STT {item['stt']}")
                item["trangthai"] = 1
            else:
                print(f"‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ cho STT {item['stt']}")
                item["trangthai"] = 0

        # Ghi l·∫°i to√†n b·ªô JSON ch·ªâ 1 l·∫ßn
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

        # Xu·∫•t file Excel
        columns_can_xuat = ["stt", "insurance_code", "patient_code", "ins_transaction_code", "ngay_ra", "trangthai"]
        output_excel_path = os.path.join(folderurl, "dataKQ.xlsx")
        json_to_excel(file_path, output_excel_path, columns_can_xuat)

        print(f"‚úÖ File Excel ƒë√£ xu·∫•t: {output_excel_path}")

    except Exception as e:
        print(f"üö® L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
